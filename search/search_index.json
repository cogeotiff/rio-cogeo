{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rio-cogeo","text":"<p> Cloud Optimized GeoTIFF (COG) creation and validation plugin for Rasterio. </p> <p> </p> <p>Documentation: cogeotiff.github.io/rio-cogeo/</p> <p>Source Code: cogeotiff/rio-cogeo</p>"},{"location":"#cloud-optimized-geotiff","title":"Cloud Optimized GeoTIFF","text":"<p>This plugin aims to facilitate the creation and validation of Cloud Optimized GeoTIFF (COG or COGEO). While it respects the COG specifications, this plugin also enforces several features:</p> <ul> <li>Internal overviews (User can remove overview with option <code>--overview-level 0</code>)</li> <li>Internal tiles (default profiles have 512x512 internal tiles)</li> </ul> <p>Important: in GDAL 3.1 a new COG driver has been added (doc, discussion), starting with <code>rio-cogeo</code> version 2.2, <code>--use-cog-driver</code> option was added to create COG using the <code>COG</code> driver.</p>"},{"location":"#install","title":"Install","text":"<pre><code>$ pip install -U pip\n$ pip install rio-cogeo\n</code></pre> <p>Or install from source:</p> <pre><code>$ pip install -U pip\n$ pip install git+https://github.com/cogeotiff/rio-cogeo.git\n</code></pre>"},{"location":"#gdal-version","title":"GDAL Version","text":"<p>It is recommended to use GDAL &gt; 2.3.2. Previous versions might not be able to create proper COGs (ref: OSGeo/gdal#754).</p> <p>More info in cogeotiff/rio-cogeo#55</p>"},{"location":"#more","title":"More","text":"<p>Blog post on good and bad COG formats: medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f</p> <p>Checkout rio-glui or rio-viz rasterio plugins to explore COG locally in your web browser.</p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"API/","title":"Application programming interface (API)","text":"<p>rio-cogeo can also be integrated directly in your custom script. See rio_cogeo.cogeo.cog_translate function.</p> <p>e.g:</p> <p><pre><code>from rio_cogeo.cogeo import cog_translate\n\ndef _translate(src_path, dst_path, profile=\"webp\", profile_options={}, **options):\n    \"\"\"Convert image to COG.\"\"\"\n    # Format creation option (see gdalwarp `-co` option)\n    output_profile = cog_profiles.get(profile)\n    output_profile.update(dict(BIGTIFF=\"IF_SAFER\"))\n    output_profile.update(profile_options)\n\n    # Dataset Open option (see gdalwarp `-oo` option)\n    config = dict(\n        GDAL_NUM_THREADS=\"ALL_CPUS\",\n        GDAL_TIFF_INTERNAL_MASK=True,\n        GDAL_TIFF_OVR_BLOCKSIZE=\"128\",\n    )\n\n    cog_translate(\n        src_path,\n        dst_path,\n        output_profile,\n        config=config,\n        in_memory=False,\n        quiet=True,\n        **options,\n    )\n    return True\n</code></pre> ref: github.com/developmentseed/cogeo-watchbot/blob/81df27470dd2eb7032d512c35af853b006d1c035/app/translator.py#L34-L56</p>"},{"location":"API/#using-the-api-with-in-memoryfile","title":"Using the API with in MemoryFile","text":"<ol> <li>Create COG from numpy array <pre><code>import numpy\n\nimport mercantile\n\nfrom rasterio.io import MemoryFile\nfrom rasterio.transform import from_bounds\n\nfrom rio_cogeo.cogeo import cog_translate\nfrom rio_cogeo.profiles import cog_profiles\n\n# Create GeoTIFF profile\nbounds = mercantile.bounds(mercantile.Tile(0,0,0))\n\n# Rasterio uses numpy array of shape of `(bands, height, width)`\nwidth = 1024\nheight = 1024\nnbands = 3\n\nimg_array = tile = numpy.random.rand(nbands, height, width).astype(numpy.float32)\n\nsrc_transform = from_bounds(*bounds, width=width, height=height)\n\nsrc_profile = dict(\n    driver=\"GTiff\",\n    dtype=\"float32\",\n    count=nbands,\n    height=height,\n    width=width,\n    crs=\"epsg:4326\",\n    transform=src_transform,\n)\n\n\nwith MemoryFile() as memfile:\n    with memfile.open(**src_profile) as mem:\n        # Populate the input file with numpy array\n        mem.write(img_array)\n\n        dst_profile = cog_profiles.get(\"deflate\")\n        cog_translate(\n            mem,\n            \"my-output-cog.tif\",\n            dst_profile,\n            in_memory=True,\n            quiet=True,\n        )\n</code></pre></li> <li>Create output COG in Memory</li> </ol> <pre><code>from rasterio.io import MemoryFile\n\nfrom rio_cogeo.cogeo import cog_translate\nfrom rio_cogeo.profiles import cog_profiles\n\nfrom boto3.session import Session as boto3_session\n\ndst_profile = cog_profiles.get(\"deflate\")\n\nwith MemoryFile() as mem_dst:\n    # Important, we pass `mem_dst.name` as output dataset path\n    cog_translate(\"my-input-file.tif\", mem_dst.name, dst_profile, in_memory=True)\n\n    # You can then use the memoryfile to do something else like\n    # upload to AWS S3\n    client = boto3_session.client(\"s3\")\n    client.upload_fileobj(mem_dst, \"my-bucket\", \"my-key\")\n</code></pre> <ol> <li>Output Progress to Alternative Text Buffer</li> </ol> <p>Use Case: You may want to run your translation tasks in the background and keep track of progress. To do so you can utilize an alternative text buffer and another thread. By outputting the progress to a seperate text buffer you can then track the translation progress without blocking the program. <pre><code>from rio_cogeo.cogeo import cog_translate\nfrom rio_cogeo.profiles import cog_profiles\n\nconfig = {\n    \"GDAL_NUM_THREADS\": \"ALL_CPUS\",\n    \"GDAL_TIFF_INTERNAL_MASK\": True,\n    \"GDAL_TIFF_OVR_BLOCKSIZE\": \"128\",\n}\n\n\nwith open(\"logfile.txt\", \"w+\") as buffer:\n\n    # Progress output buffer must be interactive\n    buffer.isatty = lambda: True\n\n    cog_translate(\n        \"example-input.tif\",\n        \"example-output.tif\",\n        cog_profiles.get(\"deflate\"),\n        config=config,\n        in_memory=False,\n        nodata=0,\n        quiet=False,\n        progress_out=buffer,\n    )\n</code></pre></p> <p>Below is a snippet of code that allows you to grab the percentage complete a translation is using the text buffer.</p> <pre><code>import re\n\ndef getPercentage(buffer:str) -&gt; float:\n    return int(re.findall(\"\\d*%\", buffer)[-1].replace(\"%\", \"\")) / 100\n</code></pre>"},{"location":"Advanced/","title":"Advanced Topics","text":""},{"location":"Advanced/#web-optimized-cog","title":"Web-Optimized COG","text":"<p>rio-cogeo provide a --web-optimized option which aims to create a web-tiling friendly COG.</p> <p>Output dataset features:</p> <ul> <li>bounds and internal tiles aligned with web-mercator grid (or to a given TMS grid).</li> <li>raw data and overviews resolution match the TMS zoom level resolution.</li> </ul> <p>Important</p> <p>Because it will certainly create a larger file (with padding tiles on the side of the file), a nodata value, an alpha band or an internal mask should be present in the input dataset. If not the original data will be surrounded by black (0) data.</p>"},{"location":"Advanced/#internal-tile-size","title":"Internal tile size","text":"<p>By default rio cogeo will create a dataset with 512x512 internal tile size. This can be updated by passing <code>--co BLOCKXSIZE=64 --co BLOCKYSIZE=64</code> options.</p> <p>Web tiling optimization</p> <p>Creating a Web-Optimized COG, means you'll get a file which is perfectly aligned (bounds and internal tiles) with the mercator grid and with resolution (for the raw data and overview) which map the mercator zoom level resolution. This enable to reduce the number of GET request a dynamic tiling service needs to do to create a map tile from your COG.</p> <p>if the input dataset is not aligned to web mercator grid, the tiler will need to fetch multiple internal tiles.</p>"},{"location":"Advanced/#overview-levels","title":"Overview levels","text":"<p>By default rio cogeo will calculate the optimal overview level based on dataset size and internal tile size (overview should not be smaller than internal tile size (e.g 512px). Overview level will be translated to decimation level of power of two:</p> <pre><code>overview_level = 3\noverviews = [2 ** j for j in range(1, overview_level + 1)]\nprint(overviews)\n[2, 4, 8]\n</code></pre>"},{"location":"Advanced/#decimation-base","title":"Decimation Base","text":"<p>As described above, a decimation base of 2 is used by default. However you can provide a custom base, N &gt; 1, with --decimation-base N. Optimal overviews are computed assuming a base 2 is used, so using --decimation-base also requires that --overview-level is provided. Similar to the default example, here are the overviews for base 3:</p> <pre><code>overview_level = 3\ndecimation_base = 3\noverviews = [decimation_base ** j for j in range(1, overview_level + 1)]\nprint(overviews)\n[3, 9, 27]\n</code></pre> <p>This is primarily useful when working with custom TileMatrixSets that also use a non-default decimation base.</p>"},{"location":"Advanced/#band-metadata","title":"Band metadata","text":"<p>By default rio cogeo DO NOT forward band metadata (e.g statistics) to the output dataset.</p> <pre><code>$ gdalinfo my_file.tif\n...\nBand 1 Block=576x1 Type=Float64, ColorInterp=Gray\n  NoData Value=999999986991104\n  Unit Type: mol mol-1\n  Metadata:\n    long_name=CO2 Dry-Air Column Average\n    missing_value=9.9999999e+14\n    NETCDF_DIM_time=0\n    NETCDF_VARNAME=XCO2MEAN\n    units=mol mol-1\n    _FillValue=9.9999999e+14\n\n$ rio cogeo my_file.tif my_cog.tif --blocksize 256\n\n$ gdalinfo my_cog.tif\n...\nBand 1 Block=256x256 Type=Float64, ColorInterp=Gray\n  NoData Value=999999986991104\n  Overviews: 288x181\n</code></pre> <p>You can use <code>--forward-band-tags</code> to forwards the band metadata to output dataset.</p> <pre><code>$ rio cogeo create my_file.tif my_cog.tif --blocksize 256 --forward-band-tags\n$ gdalinfo my_cog.tif\n...\nBand 1 Block=256x256 Type=Float64, ColorInterp=Gray\n  NoData Value=999999986991104\n  Overviews: 288x181\n  Metadata:\n    long_name=CO2 Dry-Air Column Average\n    missing_value=9.9999999e+14\n    NETCDF_DIM_time=0\n    NETCDF_VARNAME=XCO2MEAN\n    units=mol mol-1\n    _FillValue=9.9999999e+14\n</code></pre>"},{"location":"Advanced/#nodata-alpha-and-mask","title":"Nodata, Alpha and Mask","text":"<p>By default rio-cogeo will forward any nodata value or alpha channel to the output COG.</p> <p>If your dataset type is Byte or Unit16, you could use internal bit mask (with the <code>--add-mask</code> option) to replace the Nodata value or Alpha band in output dataset (supported by most GDAL based backends).</p> <p>Note: when adding a <code>mask</code> with an input dataset having an alpha band you'll need to use the <code>bidx</code> options to remove it from the output dataset.</p> <pre><code># Replace the alpha band by an internal mask\n$ rio cogeo mydataset_withalpha.tif mydataset_withmask.tif --cog-profile raw --add-mask --bidx 1,2,3\n</code></pre> <p>Important</p> <p>Using internal nodata value with lossy compression (<code>webp</code>, <code>jpeg</code>) is not recommended. Please use internal masking (or alpha band if using webp).</p>"},{"location":"CLI/","title":"Command-line interface (CLI)","text":"<p>rio-cogeo modules adds a <code>cogeo</code> sub-command to your rasterio (rio) CLI. Three (3) commands are then available: <code>create</code>, <code>info</code> and <code>validate</code>.</p> <pre><code>$ rio cogeo --help\n  Usage: rio cogeo [OPTIONS] COMMAND [ARGS]...\n\n  Rasterio cogeo subcommands.\n\n  Options:\n    --version  Show the version and exit.\n    --help     Show this message and exit.\n\n  Commands:\n    create    Create COGEO\n    info      Lists information about a raster dataset.\n    validate  Validate COGEO\n</code></pre>"},{"location":"CLI/#create","title":"Create","text":"<pre><code>$ rio cogeo create --help\n  Usage: rio cogeo create [OPTIONS] INPUT OUTPUT\n\n    Create Cloud Optimized Geotiff.\n\n  Options:\n    --bidx, -b                        Band indexes to copy.\n    --cog-profile, -p                 CloudOptimized GeoTIFF profile (default: deflate). [jpeg|webp|zstd|lzw|deflate|packbits|lzma|lerc|lerc_deflate|lerc_zstd|raw]\n    --nodata                          Set nodata masking values for input dataset.\n    --add-mask                        Force output dataset creation with an internal mask (convert alpha band or nodata to mask).\n    --blocksize                       Overwrite profile's tile size.\n    --dtype, -t                       Output data type. [ubyte|uint8|uint16|int16|uint32|int32|float32|float64]\n    --overview-level                  Overview level (if not provided, appropriate overview level will be selected until the smallest overview is smaller than the value of the internal blocksize)\n    --overview-resampling             Overview creation resampling algorithm (default: nearest).  [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss]\n    --overview-blocksize              Overview's internal tile size (default defined by GDAL_TIFF_OVR_BLOCKSIZE env or 128)\n    --web-optimized, -w               Create COGEO optimized for Web.\n    --zoom-level-strategy             Strategy to determine zoom level (default: auto).  [lower|upper|auto]\n    --zoom-level                      Zoom level number for the highest resolution. If this option is specified, `--zoom-level-strategy` is ignored.\n    --aligned-levels                  Number of overview levels for which GeoTIFF tile and tiles defined in the tiling scheme match.\n    --resampling, -r                  Resampling algorithm (default: nearest). Will only be applied with the `--web-optimized` option.  [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|max|min|med|q1|q3|sum]\n    --in-memory / --no-in-memory      Force processing raster in memory / not in memory (default: process in memory if smaller than 120 million pixels)\n    --allow-intermediate-compression  Allow intermediate file compression to reduce memory/disk footprint.\n    --forward-band-tags               Forward band tags to output bands.\n    --forward-ns-tags                 Forward namespaced tags to output dataset.\n    --threads                         Number of worker threads for multi-threaded compression (default: ALL_CPUS)\n    --use-cog-driver                  Use GDAL COG Driver (require GDAL&gt;=3.1).\n    --tms PATH                        Path to TileMatrixSet JSON file.\n    --co, --profile                   Driver specific creation options. See the documentation for the selected output driver for more information.\n    --config                          GDAL configuration options.\n    --quiet, -q                       Remove progressbar and other non-error output.\n    --help                            Show this message and exit.\n</code></pre>"},{"location":"CLI/#validate","title":"Validate","text":"<pre><code>$ rio cogeo validate --help\nUsage: rio cogeo validate [OPTIONS] INPUT\n\n  Validate Cloud Optimized Geotiff.\n\nOptions:\n  --strict             Treat warnings as errors.\n  --config NAME=VALUE  GDAL configuration options.\n  --help               Show this message and exit.\n</code></pre> <p>The <code>strict</code> options will treat warnings (e.g missing overviews) as errors.</p> <p>Using the <code>--config</code> option can be useful to restrict GDAL environment. By default GDAL will check for external files (such as overviews), which could make a COG invalid. To force GDAL to only consider the input file you can use <code>--config GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR</code>.</p> <p>e.g: <pre><code>$ rio cogeo validate s3://bucket/geo.tif --config GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR --config AWS_NO_SIGN_REQUEST=YES\n</code></pre></p>"},{"location":"CLI/#info","title":"Info","text":"<p>(extended version or <code>rio info</code>).</p> <pre><code>$ rio cogeo info --help\nUsage: rio cogeo info [OPTIONS] INPUT\n\n  Dataset info.\n\nOptions:\n  --json  Print as JSON.\n  --help  Show this message and exit.\n</code></pre>"},{"location":"CLI/#examples","title":"Examples","text":"<pre><code># Create a COGEO with DEFLATE compression (Using default `Deflate` profile)\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif\n\n# Validate COGEO\n$ rio cogeo validate mydataset_jpeg.tif\n\n# Create a COGEO with JPEG profile and the first 3 bands of the data and add internal mask\n$ rio cogeo create mydataset.tif mydataset_jpeg.tif -b 1,2,3 --add-mask --cog-profile jpeg\n\n# List Raster info\n$ rio cogeo info mydataset_jpeg.tif\nDriver: GTiff\nFile: mydataset_jpeg.tif\nCOG: True\nCompression: DEFLATE\nColorSpace: None\n\nProfile\n    Width:            10980\n    Height:           10980\n    Bands:            1\n    Tiled:            True\n    Dtype:            uint16\n    NoData:           0.0\n    Alpha Band:       False\n    Internal Mask:    False\n    Interleave:       BAND\n    Colormap:         False\n\nGeo\n    Crs:              EPSG:32634\n    Origin:           (699960.0, 3600000.0)\n    Resolution:       (10.0, -10.0)\n    BoundingBox:      (699960.0, 3490200.0, 809760.0, 3600000.0)\n    MinZoom:          10\n    MaxZoom:          19\n\nIFD\n    Id      Size           BlockSize     Decimation\n    0       10980x10980    1024x1024     0\n    1       5490x5490      128x128       2\n    2       2745x2745      128x128       4\n    3       1373x1373      128x128       8\n    4       687x687        128x128       16\n</code></pre>"},{"location":"Is_it_a_COG/","title":"How to recognize a COG and how to create a proper one!","text":"<p>Requirements</p> <ul> <li>python 3.7</li> <li>rio-cogeo</li> </ul> <p><code>$ pip install rio-cogeo</code></p> <p>The COG Specification is pretty basic</p> <p>A cloud optimized GeoTIFF is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range request (\"bytes: start_offset-end_offset\" HTTP header). It contains at its beginning the metadata of the full resolution imagery, followed by the optional presence of overview metadata, and finally the imagery itself. To make it friendly with streaming and progressive rendering, we recommend starting with the imagery of the smallest overview and finishing with the imagery of the full resolution level.</p> <p>Ref: github.com/cogeotiff/cog-spec/blob/master/spec.md</p> <p>In Short, the specification just means you MUST create a GeoTIFF with internal block (tile) and the header must be ordered.</p> <p>From a command line point of view, it just means you need to add <code>--co TILED=TRUE</code> in a gdal_translate command.</p>"},{"location":"Is_it_a_COG/#1-get-some-data","title":"1. Get some data","text":"<p>Natural Earth web site host really neat raster and vector datasets. Let's download a large scale raster image: www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/</p> <pre><code>$ wget https://naciscdn.org/naturalearth/50m/raster/HYP_50M_SR.zip\n</code></pre>"},{"location":"Is_it_a_COG/#2-inspect-the-data","title":"2. Inspect the data","text":"<p>Here is what we want to look at:</p> <ul> <li>the size in row x lines</li> <li>the data type (byte, float, complex \u2026)</li> <li>the internal block size</li> <li>the presence of overview or not</li> </ul> <pre><code>$ rio cogeo info HYP_50M_SR.tif\nDriver: GTiff\nFile: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif\nCompression: None\nColorSpace: None\n\nProfile\n    Width:            10800\n    Height:           5400\n    Bands:            3\n    Tiled:            False\n    Dtype:            uint8\n    NoData:           None\n    Alpha Band:       False\n    Internal Mask:    False\n    Interleave:       PIXEL\n    ColorMap:         False\n\nGeo\n    Crs:              EPSG:4326\n    Origin:           (-179.99999999999997, 90.0)\n    Resolution:       (0.03333333333333, -0.03333333333333)\n    BoundingBox:      (-179.99999999999997, -89.99999999998201, 179.99999999996405, 90.0)\n\nIFD\n    Id      Size           BlockSize     Decimation\n    0       10800x5400     10800x1       0\n</code></pre> <p>What we can see from the rio cogeo info output:</p> <ul> <li>The raster has 3 bands</li> <li>The data type is Byte (0 \u2192 255)</li> <li>It's not internally tiled (<code>Tiled: false</code> and <code>BlockSize=10800x1</code>)</li> <li>There is no overview (Only one IFD)</li> </ul> <p>With those informations we already know the GeoTIFF is not a COG (no internal blocks), but let's confirm with the validation script.</p>"},{"location":"Is_it_a_COG/#3-cog-validation","title":"3. COG validation","text":"<pre><code>$ rio cogeo validate HYP_50M_SR.tif\nThe following warnings were found:\n- The file is greater than 512xH or 512xW, it is recommended to include internal overviews\n\nThe following errors were found:\n- The file is greater than 512xH or 512xW, but is not tiled\n- The offset of the main IFD should be 8 for ClassicTIFF or 16 for BigTIFF. It is 174982088 instead\n- The offset of the first block of the image should be after its IFD\n/Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif is NOT a valid cloud optimized GeoTIFF\n</code></pre> <p>As mentioned earlier, the validation script confirms the GeoTIFF is not internally tiled and doesn't have overviews.</p>"},{"location":"Is_it_a_COG/#4-cog-creation","title":"4. COG creation","text":"<p>Creating a valid Cloud Optimized GeoTIFF, is not just about creating internal tiles and/or internal overviews. The file internal structure has to be specific and require a complete copy of a file, which is what rio-cogeo does internally.</p> <pre><code>$ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG.tif\nReading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif\n    [####################################]  100%\nAdding overviews...\nUpdating dataset tags...\nWriting output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif\n</code></pre> <p>You could get the same COG with GDAL commands</p> <pre><code>$ gdal_translate HYP_50M_SR.tif tmp.tif -co TILED=YES -co COMPRESS=DEFLATE\n$ gdaladdo -r nearest tmp.tif 2 4 8 16 32\n$ gdal_translate tmp.tif HYP_50M_SR_COG.tif -co TILED=YES -co COMPRESS=DEFLATE -co COPY_SRC_OVERVIEWS=YES\n</code></pre> <p>By default <code>rio-cogeo</code> will create a COG with 512x512 blocksize (for the raw resolution) and use DEFLATE compression to reduce file size.</p> <pre><code>$ rio cogeo info HYP_50M_SR_COG.tif\nDriver: GTiff\nFile: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif\nCompression: DEFLATE\nColorSpace: None\n\nProfile\n    Width:            10800\n    Height:           5400\n    Bands:            3\n    Tiled:            True\n    Dtype:            uint8\n    NoData:           None\n    Alpha Band:       False\n    Internal Mask:    False\n    Interleave:       PIXEL\n    ColorMap:         False\n\nGeo\n    Crs:              EPSG:4326\n    Origin:           (-179.99999999999997, 90.0)\n    Resolution:       (0.03333333333333001, -0.03333333333333001)\n    BoundingBox:      (-179.99999999999997, -89.99999999998204, 179.9999999999641, 90.0)\n\nIFD\n    Id      Size           BlockSize     Decimation\n    0       10800x5400     512x512       0\n    1       5400x2700      128x128       2\n    2       2700x1350      128x128       4\n    3       1350x675       128x128       8\n    4       675x338        128x128       16\n</code></pre> <p>The importance of the compression</p> <pre><code>$ ls -lah\n-rw-r--r--@  1 youpi  staff   167M Oct 18  2014 HYP_50M_SR.tif\n-rw-r--r--   1 youpi  staff    58M Jun 12 14:56 HYP_50M_SR_COG.tif\n</code></pre> <p>By using <code>rio-cogeo</code>, we are not only creating a valid COG with internal tiling but we are also adding internal overviews (which let us get previews of the raw resolution with few GET requests).</p> <p>Even with the addition of 4 levels of overviews (see IFD section in previous  <code>rio cogeo info</code> output), we managed to reduce the file size by 3 (167Mb \u2192 58Mb), and this is because rio cogeo applies Deflate compression by default to the COG.</p> <p>More Magic ?</p> <p>As seen in the first <code>rio cogeo info</code> output, the data has 3 bands (RGB) and is of Uint8 data type. Because of this configuration, we can use even more efficient compression like JPEG or WEBP.</p> <pre><code>$ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG_jpeg.tif -p jpeg\nReading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif\n    [####################################]  100%\nAdding overviews...\nUpdating dataset tags...\nWriting output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG_jpeg.tif\n\n$ ls -lah\n-rw-r--r--@  1 vincentsarago  staff   167M Oct 18  2014 HYP_50M_SR.tif\n-rw-r--r--   1 vincentsarago  staff    58M Jun 12 14:56 HYP_50M_SR_COG.tif\n-rw-r--r--   1 vincentsarago  staff   4.8M Jun 15 11:08 HYP_50M_SR_COG_jpeg.tif\n</code></pre> <p>Now, our output file is only 4.8Mb, which is only ~3% of the original size \ud83d\ude31.</p> <p>Note:</p> <ul> <li>JPEG compression is not lossless but lossy, meaning we will loose some information (change in pixel values) but if you need a COG for visual purposes the gain in size might be worth it.</li> <li>WEBP compression has a configuration option to be lossless and will result is a file which will be ~50% smaller than the deflate version. Sadly WEBP is not provided by default in geospatial software.</li> </ul>"},{"location":"Is_it_a_COG/#5-visualize","title":"5. Visualize","text":"<p>You can either load the COG in QGIS or use our plugin (rio-viz) to load it in a web browser.</p> <pre><code>$ pip install rio-viz\n$ rio viz HYP_50M_SR_COG.tif\n</code></pre> <p></p>"},{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome.</p> <p>dev install</p> <p><pre><code>$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ cd rio-cogeo\n$ pip install -e .[\"test\",\"dev\"]\n</code></pre> You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov rio_cogeo --cov-report term-missing\n</code></pre>"},{"location":"contributing/#pre-commit","title":"pre-commit","text":"<p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>$ git clone https://github.com/cogeotiff/rio-cogeo.git\n$ cd rio-cogeo\n$ pip install -e .[\"docs\"]\n</code></pre> <p>Hot-reloading docs (from repository root):</p> <pre><code>$ mkdocs serve -f docs/mkdocs.yml\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>$ mkdocs gh-deploy\n</code></pre>"},{"location":"profile/","title":"COG Profiles","text":"<p>rio-cogeo defines default Cloud Optimized GeoTIFF profiles which user can use with the CLI or directly with the API.</p> <p>Default profiles are tiled (<code>tiled=True</code>) with 512x512 blocksizes.</p> <pre><code>from rio_cogeo.profiles import cog_profiles\n\ncog_profiles\n&gt; {\n    'jpeg': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'JPEG', 'photometric': 'YCbCr'},\n    'webp': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'WEBP'},\n    'zstd': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'ZSTD'},\n    'lzw': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'LZW'},\n    'deflate': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'DEFLATE'}\n    'packbits': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'PACKBITS'},\n    'lzma': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'LZMA'},\n    'lerc': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'LERC'},\n    'lerc_deflate': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'LERC_DEFLATE'},\n    'lerc_zstd': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512, 'compress': 'LERC_ZSTD'},\n    'raw': {'driver': 'GTiff', 'interleave': 'pixel', 'tiled': True, 'blockxsize': 512, 'blockysize': 512}\n}\n</code></pre> <p>JPEG</p> <ul> <li>JPEG compression</li> <li>PIXEL interleave</li> <li>YCbCr (3 bands) colorspace or MINISBLACK (1 band)</li> <li>limited to uint8 datatype and 3 bands data</li> </ul> <p>WEBP</p> <ul> <li>WEBP compression</li> <li>PIXEL interleave</li> <li>limited to uint8 datatype and 3 or 4 bands data</li> <li>Non-Standard, might not be supported by software not build against GDAL+internal libtiff + libwebp</li> <li>Available for GDAL&gt;=2.4.0</li> </ul> <p>ZSTD</p> <ul> <li>ZSTD compression</li> <li>PIXEL interleave</li> <li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li> <li>Available for GDAL&gt;=2.3.0</li> </ul> <p>Note in Nov 2018, there was a change in libtiff's ZSTD tags which create incompatibility for old ZSTD compressed GeoTIFF (link)</p> <p>LZW</p> <ul> <li>LZW compression</li> <li>PIXEL interleave</li> </ul> <p>DEFLATE</p> <ul> <li>DEFLATE compression</li> <li>PIXEL interleave</li> </ul> <p>PACKBITS</p> <ul> <li>PACKBITS compression</li> <li>PIXEL interleave</li> </ul> <p>LZMA</p> <ul> <li>LZMA compression</li> <li>PIXEL interleave</li> </ul> <p>LERC</p> <ul> <li>LERC compression</li> <li>PIXEL interleave</li> <li>Default MAX_Z_ERROR=0 (lossless)</li> <li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff</li> <li>Available for GDAL&gt;=2.4.0</li> </ul> <p>LERC_DEFLATE</p> <ul> <li>LERC_DEFLATE compression</li> <li>PIXEL interleave</li> <li>Default MAX_Z_ERROR=0 (lossless)</li> <li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li> <li>Available for GDAL&gt;=2.4.0</li> </ul> <p>LERC_ZSTD</p> <ul> <li>LERC_ZSTD compression</li> <li>PIXEL interleave</li> <li>Default MAX_Z_ERROR=0 (lossless)</li> <li>Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd</li> <li>Available for GDAL&gt;=2.4.0</li> </ul> <p>RAW</p> <ul> <li>NO compression</li> <li>PIXEL interleave</li> </ul>"},{"location":"profile/#custom","title":"Custom","text":"<p>Profiles can be extended by providing '--co' option in command line</p> <pre><code># Create a COGEO without compression and with 1024x1024 block size and 256 overview blocksize\n$ rio cogeo create mydataset.tif mydataset_raw.tif --co BLOCKXSIZE=1024 --co BLOCKYSIZE=1024 --cog-profile raw --overview-blocksize 256\n</code></pre> <p>See gdal.org/drivers/raster/gtiff.html#creation-options for full details of creation options.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#542-2025-06-27","title":"5.4.2 (2025-06-27)","text":"<ul> <li>add user warning when input dataset has both Nodata and internal Alpha/Mask band</li> </ul>"},{"location":"release-notes/#541-2024-12-16","title":"5.4.1 (2024-12-16)","text":"<ul> <li>fix reading raster compression value with <code>rasterio&gt;=1.4.3</code> (author @glostis, cogeotiff/rio-cogeo!300)</li> </ul>"},{"location":"release-notes/#540-2024-11-25","title":"5.4.0 (2024-11-25)","text":"<ul> <li>update <code>morecantile</code> dependency to <code>morecantile&gt;=5.0,&lt;7.0</code> (author @AndrewAnnex, cogeotiff/rio-cogeo!298)</li> </ul>"},{"location":"release-notes/#536-2024-10-03","title":"5.3.6 (2024-10-03)","text":"<ul> <li>add <code>py.typed</code> file (author @mentaljam, cogeotiff/rio-cogeo!297)</li> </ul>"},{"location":"release-notes/#535-2024-10-03","title":"5.3.5 (2024-10-03)","text":"<ul> <li>no change since <code>5.3.4</code></li> </ul>"},{"location":"release-notes/#534-2024-08-28","title":"5.3.4 (2024-08-28)","text":"<ul> <li>make sure there is no overviews when <code>overview_level=0</code> and using GDAL COG Driver (author @lagamura, cogeotiff/rio-cogeo!289)</li> <li>add python 3.12 support</li> </ul>"},{"location":"release-notes/#533-2024-07-04","title":"5.3.3 (2024-07-04)","text":"<ul> <li>remove Numpy requirement in <code>pyproject.toml</code></li> </ul>"},{"location":"release-notes/#532-2024-06-13","title":"5.3.2 (2024-06-13)","text":"<ul> <li>do not set output size in the intermediate VRT</li> <li>add Alpha band for GCPS wrapped dataset</li> </ul>"},{"location":"release-notes/#531-2024-06-12","title":"5.3.1 (2024-06-12)","text":"<ul> <li>fix issue when creating COG from file with internal GCPS</li> </ul>"},{"location":"release-notes/#530-2024-03-02","title":"5.3.0 (2024-03-02)","text":"<ul> <li>add <code>decimation_base</code> option in <code>cogeo.cog_translate</code> (author @mccarthyryanc, cogeotiff/rio-cogeo!285)</li> </ul>"},{"location":"release-notes/#520-2024-02-16","title":"5.2.0 (2024-02-16)","text":"<ul> <li> <p>remove <code>is_tiled</code> rasterio method and add better test for blockshapes for the validation script (author @sgillies, cogeotiff/rio-cogeo!278)</p> </li> <li> <p>Deprecate parameter web_optimized of <code>cogeo.cog_translate</code> Python function (author @alexismanin, cogeotiff/rio-cogeo!279)</p> <pre><code># before\noutput_profile = cog_profiles.get(profile)\n\ntms = morecantile.tms.get(\"WGS1984Quad\")\ncog_translate(\n    \"in.tif\",\n    \"out.tif\",\n    output_profile,\n    web_optimzed=True,\n    tms=tms\n)\n\n# now\ntms = morecantile.tms.get(\"WGS1984Quad\")\ncog_translate(\n    \"in.tif\",\n    \"out.tif\",\n    output_profile,\n    tms=tms\n)\n</code></pre> </li> <li> <p>fix COG validation for SPARSE dataset (author @mpadillaruiz, cogeotiff/rio-cogeo#281)</p> </li> </ul>"},{"location":"release-notes/#cli","title":"CLI","text":"<ul> <li> <p>remove default (128) for <code>--overview-blocksize</code> option in the CLI. Now defaults to GDAL behaviour.</p> </li> <li> <p>change how <code>blocksize</code> for overviews is defined when using <code>tms</code> or <code>web-optimized</code> options</p> </li> <li> <p><code>blocksize</code> is now defined from the tilematrixset's <code>tileWidth</code> and <code>tileHeight</code> when <code>--blocksize</code> is not provided</p> </li> </ul>"},{"location":"release-notes/#511-2024-01-08","title":"5.1.1 (2024-01-08)","text":"<ul> <li>use morecantile <code>TileMatrixSet.cellSize</code> property instead of deprecated/private <code>TileMatrixSet._resolution</code> method</li> </ul>"},{"location":"release-notes/#510-2023-12-11","title":"5.1.0 (2023-12-11)","text":"<ul> <li>add option to write progress to an external text buffer (author @SellersEvan, cogeotiff/rio-cogeo!273)</li> </ul>"},{"location":"release-notes/#500-2023-07-25","title":"5.0.0 (2023-07-25)","text":"<ul> <li>update <code>morecantile</code> requirement to <code>&gt;=5.0,&lt;6.0</code> (author @mentaljam, cogeotiff/rio-cogeo!267)</li> <li>update <code>pydantic</code> requirement to <code>~=2.0</code> (author @mentaljam, cogeotiff/rio-cogeo!267)</li> <li>fix <code>pydantic</code> deprecation warnings (author @mentaljam, cogeotiff/rio-cogeo!267)</li> <li>replace <code>BaseModel.json</code> with <code>BaseModel.model_dump_json</code></li> <li>replace <code>BaseModel.dict</code> with <code>BaseModel.model_dump</code></li> <li>replace <code>class Config</code> with <code>model_config</code> class variables</li> </ul>"},{"location":"release-notes/#401-2023-07-11","title":"4.0.1 (2023-07-11)","text":"<ul> <li>limit pydantic requirement to `~=1.0``</li> </ul>"},{"location":"release-notes/#400-2023-05-31","title":"4.0.0 (2023-05-31)","text":"<ul> <li>update morecantile requirement to <code>&gt;=4.0.0</code></li> <li>native support for all TileMatrixSet (with respect of the TMS spec 2.0)</li> <li>add <code>--tms</code> option to specify a path to a TileMatrixSet JSON file</li> <li>switch resampling enums to python Literal</li> </ul> <p>breaking change</p> <ul> <li> <p>Web optimization is now done in rio-cogeo instead of GDAL, when using <code>--web-optimized</code> and <code>--use-cog-driver</code> options</p> </li> <li> <p>switch from using <code>TILING_SCHEME</code> namespaced tags to simple <code>TILING_SCHEME_</code> prefixed metadata</p> </li> </ul> <pre><code># before\nwith rasterio.open(\"cog_web.tif\") as src:\n    print(src.tags(ns=\"TILING_SCHEME\"))\n&gt;&gt;&gt; {\n    \"NAME\": \"WebMercatorQuad\",\n    \"ZOOM_LEVEL\": \"18\",\n}\n\n# now\nwith rasterio.open(\"cog_web.tif\") as src:\n    print(src.tags())\n&gt;&gt;&gt; {\n    \"TILING_SCHEME_NAME\": \"WebMercatorQuad\",\n    \"TILING_SCHEME_ZOOM_LEVEL\": \"18\",\n}\n</code></pre>"},{"location":"release-notes/#352-2023-05-22","title":"3.5.2 (2023-05-22)","text":"<ul> <li>Flag GeoTIFFs with invalidated optimizations as invalid COGs (author @mplough-kobold, cogeotiff/rio-cogeo!260)</li> </ul>"},{"location":"release-notes/#351-2023-04-06","title":"3.5.1 (2023-04-06)","text":"<ul> <li>Use Case-insensitive check for external overviews (author @mplough-kobold, cogeotiff/rio-cogeo!252)</li> <li>Use destination directory for the temporary file</li> </ul>"},{"location":"release-notes/#350-2022-10-26","title":"3.5.0 (2022-10-26)","text":"<ul> <li>add python 3.11 support</li> </ul> <p>Breaking Changes</p> <ul> <li>remove python 3.7 support</li> <li>require rasterio &gt;= 1.3.3 (ref: cogeotiff/rio-cogeo?248)</li> <li>COG can be have blocksize (bigger than their <code>height</code> or <code>width</code>) and be tiled even if they are smaller than 512x512</li> </ul> <pre><code># before\nrio cogeo create image_51x51.tif cog.tif\nrio cogeo info cog.tif --json | jq '.IFD'\n&gt;&gt;&gt; [\n  {\n    \"Level\": 0,\n    \"Width\": 51,\n    \"Height\": 51,\n    \"Blocksize\": [\n      51,\n      51\n    ],\n    \"Decimation\": 0\n  }\n]\nrio cogeo info cog.tif --json | jq '.Profile.Tiled'\n&gt;&gt;&gt; false\n\n# now\nrio cogeo create image_51x51.tif cog.tif\nrio cogeo info cog.tif --json | jq '.IFD'\n&gt;&gt;&gt; [\n  {\n    \"Level\": 0,\n    \"Width\": 51,\n    \"Height\": 51,\n    \"Blocksize\": [\n      512,\n      512\n    ],\n    \"Decimation\": 0\n  }\n]\nrio cogeo info cog.tif --json | jq '.Profile.Tiled'\n&gt;&gt;&gt; true\n</code></pre>"},{"location":"release-notes/#341-2022-09-14","title":"3.4.1 (2022-09-14)","text":"<ul> <li>avoid breaking change for <code>cog_info()</code> when previously passing <code>*kwargs</code> to <code>cog_validate</code></li> </ul>"},{"location":"release-notes/#340-2022-09-05","title":"3.4.0 (2022-09-05)","text":"<ul> <li>add python 3.10 support</li> <li>allow forwarding namespaced metadata to output dataset</li> <li>set GDAL config for all <code>info</code> methods (previously GDAL's configs were only use in the COG validation step)</li> </ul>"},{"location":"release-notes/#330-2022-06-24","title":"3.3.0 (2022-06-24)","text":"<ul> <li>allow non-GeoTIFF in <code>cog_validate</code></li> <li>allow <code>config</code> option in <code>rio cogeo info</code> CLI</li> </ul>"},{"location":"release-notes/#320-2022-04-05","title":"3.2.0 (2022-04-05)","text":"<ul> <li>Switch to <code>pyproject.toml</code> (cogeotiff/rio-cogeo!232)</li> <li>add <code>--zoom-level</code> option to define dataset coarsest zoom level, when creating <code>web optimized</code> COG.</li> </ul>"},{"location":"release-notes/#310-2022-02-18","title":"3.1.0 (2022-02-18)","text":"<ul> <li>Fix equivalence for rio-cogeo and GDAL definition of <code>aligned_levels</code></li> </ul> <p>Breaking Changes:</p> <ul> <li>update morecantile requirement to <code>&gt;=3.1,&lt;4.0</code>. WebOptimized COGs will is now aligned with GDAL and Mercantile TMS definition.</li> </ul>"},{"location":"release-notes/#303-2021-02-14","title":"3.0.3 (2021-02-14)","text":"<ul> <li>use <code>rasterio.vrt.WarpedVRT</code> in <code>utils.get_web_optimized_params</code> to better handle dataset with GEOS projection (crossing dateline).</li> </ul>"},{"location":"release-notes/#302-2021-12-16","title":"3.0.2 (2021-12-16)","text":"<ul> <li>remove usage of (soon to be deprecated) <code>rasterio.path</code> (cogeotiff/rio-cogeo!222)</li> <li>add band metadata in <code>cog_info</code> output and update <code>rio_cogeo.models.Info</code> (cogeotiff/rio-cogeo!223)</li> </ul>"},{"location":"release-notes/#301-2021-10-27","title":"3.0.1 (2021-10-27)","text":"<ul> <li>update <code>test</code> and <code>dev</code> dependencies to <code>rio-tiler&gt;=3.0.0a0</code></li> </ul>"},{"location":"release-notes/#300-2021-09-30","title":"3.0.0 (2021-09-30)","text":"<ul> <li>no changes since 3.0.0a0</li> </ul>"},{"location":"release-notes/#300a0-2021-09-23","title":"3.0.0a0 (2021-09-23)","text":"<ul> <li>update to <code>morecantile&gt;=3.0</code></li> <li>raise warning when using incompatible options for GDAL COG driver (cogeotiff/rio-cogeo!212)</li> </ul>"},{"location":"release-notes/#231-2021-07-06","title":"2.3.1 (2021-07-06)","text":"<ul> <li>update <code>click</code> version requirement to <code>&gt;=7.0</code> to make sure <code>click.Choice</code> supports the <code>case_sensitive</code> option.</li> </ul>"},{"location":"release-notes/#230-2021-06-25","title":"2.3.0 (2021-06-25)","text":"<ul> <li>allow external configuration (GDAL Env) for <code>cog_validate</code> (cogeotiff/rio-cogeo!206)</li> </ul> <pre><code>from rio_cogeo import cog_validate\n\nassert cog_validate(\"cog.tif\", congig={\"GDAL_DISABLE_READDIR_ON_OPEN\": \"EMPTY_DIR\"})[0]\n</code></pre> <p>In previous version we were forcing <code>GDAL_DISABLE_READDIR_ON_OPEN=FALSE</code> in <code>cog_validate</code> function to check for external overviews.</p> <p>Starting with version 2.3, it's up to the user to set the wanted GDAL configuration (e.g <code>EMPTY_DIR</code>: no external file check, <code>FALSE</code>: check for external files)</p>"},{"location":"release-notes/#223-2021-06-18","title":"2.2.3 (2021-06-18)","text":"<ul> <li>use opened file for click progressbar (cogeotiff/rio-cogeo!204)</li> </ul>"},{"location":"release-notes/#222-2021-06-01","title":"2.2.2 (2021-06-01)","text":"<ul> <li>Add dictionary access to <code>Info</code> model (author @geospatial-jeff, cogeotiff/rio-cogeo!201)</li> <li>remove unsupported resampling method for Warping in CLI options (author @drnextgis, cogeotiff/rio-cogeo!202)</li> </ul>"},{"location":"release-notes/#221-2021-05-19","title":"2.2.1 (2021-05-19)","text":"<ul> <li>replace missing rio-tiler dependencies with a custom BBox type definition (cogeotiff/rio-cogeo!198)</li> </ul>"},{"location":"release-notes/#220-2021-05-18","title":"2.2.0 (2021-05-18)","text":"<ul> <li>add pydantic models for <code>info</code> output (cogeotiff/rio-cogeo#191)</li> <li>add <code>use_cog_driver</code> option to create COG using new GDAL COG Driver (cogeotiff/rio-cogeo!194)</li> </ul> <p>Breaking Changes:</p> <ul> <li><code>rio_cogeo.cogeo.cog_info</code> now returns a pydantic model</li> </ul> <pre><code>from rio_cogeo.cogeo import cog_info\n\n# before\ninfo = cog_info(\"my.tif\")\nassert isinstance(info, dict)\nassert info[\"GEO\"][\"CRS\"]\n\n# now\nassert isinstance(info, rio_cogeo.models.Info)\nassert info.GEO.CRS\n</code></pre> <ul> <li>add <code>TILING SCHEME</code> in dataset namespaced metadata when creating WebOptimized COG (cogeotiff/rio-cogeo!193)</li> <li>add more info in rio cogeo info <code>Tags</code> (cogeotiff/rio-cogeo!193)</li> </ul> <pre><code># before\n$ rio cogeo create in.tif out.tif -w\n$ rio cogeo info out.tif | jq .Tags\n\n&gt;&gt;&gt; {\n  \"AREA_OR_POINT\": \"Area\",\n  \"OVR_RESAMPLING_ALG\": \"NEAREST\"\n}\n\n# now\n$ rio cogeo create in.tif out.tif -w\n$ rio cogeo info out.tif | jq .Tags\n&gt;&gt; {\n  \"Image Metadata\": {\n    \"AREA_OR_POINT\": \"Area\",\n    \"DataType\": \"Generic\",\n    \"OVR_RESAMPLING_ALG\": \"NEAREST\"\n  },\n  \"Image Structure\": {\n    \"COMPRESSION\": \"DEFLATE\",\n    \"INTERLEAVE\": \"BAND\",\n    \"LAYOUT\": \"COG\"\n  },\n  \"Tiling Scheme\": {\n    \"NAME\": \"WEBMERCATORQUAD\",\n    \"ZOOM_LEVEL\": \"17\"\n  }\n}\n</code></pre> <ul> <li>update <code>Web-Optimized</code> configuration to match GDAL COG Driver (cogeotiff/rio-cogeo!193)</li> </ul> <p>By default only the <code>raw</code> data will be aligned to the grid. To align overviews, the <code>aligned_levels</code> option can be used (wasn't really working in previous version).</p> <ul> <li> <p><code>rio_cogeo.utils.get_web_optimized_params</code> has been refactored (cogeotiff/rio-cogeo!193)</p> </li> <li> <p><code>cog_translate</code> will now materialize Nodata or Alpha band to an internal mask automatically for JPEG compresssed output (cogeotiff/rio-cogeo!196)</p> </li> </ul> <pre><code># before\ncog_translate(raster_path_rgba, \"cogeo.tif\", jpeg_profile)\nwith rasterio.open(\"cogeo.tif\") as src:\n    assert src.count == 4\n    assert src.compression.value == \"JPEG\"\n    assert has_alpha_band(src)\n    assert not has_mask_band(src)\n\n# now\ncog_translate(raster_path_rgba, \"cogeo.tif\", jpeg_profile)\nwith rasterio.open(\"cogeo.tif\") as src:\n    assert src.count == 3\n    assert src.compression.value == \"JPEG\"\n    assert has_mask_band(src)\n</code></pre>"},{"location":"release-notes/#214-2021-03-31","title":"2.1.4 (2021-03-31)","text":"<ul> <li>fix issue in validation when BLOCK_OFFSET_0 is None (cogeotiff/rio-cogeo#182)</li> </ul>"},{"location":"release-notes/#213-2021-03-03","title":"2.1.3 (2021-03-03)","text":"<ul> <li>add colormap options in <code>cog_translate</code> to allow a user to set or update a colormap</li> </ul> <pre><code>cmap = {0: (0, 0, 0, 0), 1: (1, 2, 3, 255)}\ncog_translate(\"boring.tif\", \"cogeo.tif\", deflate_profile, colormap=cmap)\nwith rasterio.open(\"cogeo.tif\") as cog:\n    print(cog.colormap(1)[1])\n\n&gt;&gt;&gt; (1, 2, 3, 255)\n</code></pre> <ul> <li>add additional_cog_metadata options in <code>cog_translate</code> to allow the user to add more dataset metadatas</li> </ul> <pre><code>cog_translate(\"boring.tif\", \"cogeo.tif\", deflate_profile, additional_cog_metadata={\"comments\": \"I made this tiff with rio-cogeo\"})\n\nwith rasterio.open(\"cogeo.tif\") as cog:\n    print(cog.tags()[\"comment\"])\n\n&gt;&gt;&gt; \"I made this tiff with rio-cogeo\"\n</code></pre>"},{"location":"release-notes/#212-2021-02-10","title":"2.1.2 (2021-02-10)","text":"<ul> <li>remove useless path translation to pathlib and avoid side effect when using a URL (cogeotiff/rio-cogeo#178)</li> </ul>"},{"location":"release-notes/#211-2021-01-27","title":"2.1.1 (2021-01-27)","text":"<ul> <li>drop support for Python 3.5 (cogeotiff/rio-cogeo#173)</li> <li>allow pathlib.PurePath object as input and output (cogeotiff/rio-cogeo#173)</li> <li>add top-level exports (cogeotiff/rio-cogeo#169)</li> </ul> <pre><code># before\nfrom rio_cogeo.cogeo import cog_translate, cog_validate, cog_info\nfrom rio_cogeo.profiles import cog_profiles\n\n# now\nfrom rio_cogeo import cog_translate, cog_validate, cog_info, cog_profiles\n</code></pre>"},{"location":"release-notes/#210-2020-12-18","title":"2.1.0 (2020-12-18)","text":"<ul> <li>switch to <code>morecantile</code> and update the web-optimized creation method to better match GDAL 3.2.</li> <li>add <code>zoom_level_strategy</code> options to match GDAL 3.2 COG driver.</li> <li>add <code>aligned_levels</code> (cli and api) to select the level of overview to align with the TMS grid.</li> </ul> <p>Breaking Changes: * removed <code>--latitude-adjustment/--global-maxzoom</code> option in the CLI * removed <code>latitude_adjustment</code> option in <code>rio_cogeo.cogeo.cog_translate</code> * updated overview blocksize to match the blocksize of the high resolution data (instead of default to 128) * for web-optimized COG, the highest overview level will be aligned with the TMS grid.</p>"},{"location":"release-notes/#201-2020-10-07","title":"2.0.1 (2020-10-07)","text":"<ul> <li>remove <code>pkg_resources</code> (pypa/setuptools#510)</li> </ul>"},{"location":"release-notes/#200-2020-10-05","title":"2.0.0 (2020-10-05)","text":"<p>There have been no changes since 2.0a9</p>"},{"location":"release-notes/#20a9-2020-10-03","title":"2.0a9 (2020-10-03)","text":"<ul> <li>Update max IFD offset to 300 bytes (cogeotiff/rio-cogeo#158)</li> </ul>"},{"location":"release-notes/#20a8-2020-09-28","title":"2.0a8 (2020-09-28)","text":"<ul> <li>Make sure Alpha band isn't considered as an internal mask by <code>utils.has_mask_band</code> (#156)</li> </ul>"},{"location":"release-notes/#20a7post1-2020-09-23","title":"2.0a7.post1 (2020-09-23)","text":"<ul> <li>Fix wrong min-zoom calculation in <code>rio_cogeo.cogeo.cog_info</code></li> </ul>"},{"location":"release-notes/#20a7-2020-09-23","title":"2.0a7 (2020-09-23)","text":"<ul> <li>remove duplicate <code>count</code> information in rio_cogeo.cogeo.cog_info output (#150)</li> <li>allow COG with IFD offset up to 200 bytes to accomodate with GDAL 3.1 changes (#151)</li> <li>fix zoom level calculation in <code>rio_cogeo.cogeo.cog_info</code></li> </ul>"},{"location":"release-notes/#20a6-2020-08-18","title":"2.0a6 (2020-08-18)","text":"<ul> <li>fix bug in cogeo.info when CRS in not set.</li> <li>add minzoom/maxzoom in cogeo.info output.</li> </ul> <p>Breaking Changes: * rio_cogeo.utils.get_max_zoom renamed rio_cogeo.utils.get_zooms and now return min/max zoom.</p>"},{"location":"release-notes/#20a5-2020-07-31","title":"2.0a5 (2020-07-31)","text":"<ul> <li>move most of the cogeo info code in rio_cogeo.cogeo.cog_info api</li> <li>add cog_validation info in cogeo info result</li> <li>cog_validate returns a tuple (is_valid, errors, warnings) (#142, co-author with @geospatial-jeff)</li> <li>add scale, offset, image tags and band color interpretation in cog_info (#145, #146 and #147)</li> </ul>"},{"location":"release-notes/#20a4-2020-06-15","title":"2.0a4 (2020-06-15)","text":"<ul> <li>Force output width and height (#140)</li> </ul>"},{"location":"release-notes/#20a3-2020-06-15","title":"2.0a3 (2020-06-15)","text":"<ul> <li>add <code>info</code> CLI (#134)</li> <li>use <code>Deflate</code> as default temporary compression (#137)</li> </ul>"},{"location":"release-notes/#20a2-2020-05-20","title":"2.0a2 (2020-05-20)","text":"<ul> <li>add <code>--config</code> CLI option to pass additional GDAL Configuration options (#135)</li> </ul>"},{"location":"release-notes/#20a1-2020-05-07","title":"2.0a1 (2020-05-07)","text":"<ul> <li>Dropping python 2 (#128)</li> <li>use new mercantile xy_bounds for better web-optimized file (#126)</li> <li>Allow temporary file on disk when using MemoryFile output</li> <li>add <code>--blocksize</code> option in CLI (#131)</li> <li>depreciate <code>rio_cogeo.utils.get_maximum_overview_level</code> and use rasterio.rio.overview.get_maximum_overview_level (#132)</li> </ul>"},{"location":"release-notes/#1110-2020-02-21","title":"1.1.10 (2020-02-21)","text":"<ul> <li>Transfer colormap (#121)</li> </ul>"},{"location":"release-notes/#119-2020-02-06","title":"1.1.9 (2020-02-06)","text":"<ul> <li>Transfer scale and offset values to output COG (#118)</li> </ul>"},{"location":"release-notes/#118-2020-01-08","title":"1.1.8 (2020-01-08)","text":"<ul> <li>Transfer color interpretation value to output COG (#113) * Thanks @pierotofy</li> <li>Cast <code>dataset_mask</code> returned by rasterio to uint8 to overcome a bug in rasterio 1.1.2 (#115)</li> </ul>"},{"location":"release-notes/#117-2019-12-02","title":"1.1.7 (2019-12-02)","text":"<ul> <li>add <code>strict</code> option to cog_validate to treat warnings as error (#109) * Thanks @pierotofy</li> <li>add documentation examples using MemoryFiles (#108 #107)</li> <li>Switch to <code>PHOTOMETRIC=MINISBLACK</code> when PHOTOMETRIC is set to YCBCR for 1 band dataset (#41)</li> </ul>"},{"location":"release-notes/#116-2019-11-13","title":"1.1.6 (2019-11-13)","text":"<ul> <li>add <code>-forward-band-tags</code> options (#115)</li> </ul>"},{"location":"release-notes/#115-2019-10-04","title":"1.1.5 (2019-10-04)","text":"<ul> <li>add <code>--allow-intermediate-compression</code> option to reduce the memory/disk footprint (#103)</li> </ul>"},{"location":"release-notes/#114-2019-10-03","title":"1.1.4 (2019-10-03)","text":"<ul> <li>Fix support for optimizing open datasets, memfiles, and VRTs (#100 from j08lue)</li> </ul>"},{"location":"release-notes/#113-2019-09-16","title":"1.1.3 (2019-09-16)","text":"<ul> <li>Add lzma/lerc/lerc_deflate/lerc_zstd profiles (#97)</li> <li>Add warnings and notes for <code>non-standard</code> compression (#97)</li> <li>fix THREADS definition for GDAL config</li> </ul>"},{"location":"release-notes/#112-2019-09-12","title":"1.1.2 (2019-09-12)","text":"<ul> <li>Fix incorrect context behavior closing input Dataset (#94)</li> </ul>"},{"location":"release-notes/#111-2019-09-10","title":"1.1.1 (2019-09-10)","text":"<ul> <li>add safeguard to keep datatype from input to output files (#85)</li> </ul> <p>CLI Changes: * add <code>-t, --dtype</code> datatype option.</p> <p>API Changes: * add datatype option * update for rasterio&gt;=1.0.28 * allow rasterio.io.DatasetReader input (#89)</p> <p>Note: This release was deleted in PyPi.</p>"},{"location":"release-notes/#110-2019-07-16","title":"1.1.0 (2019-07-16)","text":"<ul> <li>check internal blocksize and adapt if raster is too small (#80)</li> </ul>"},{"location":"release-notes/#100-2019-04-19","title":"1.0.0 (2019-04-19)","text":"<ul> <li>add <code>--web-optimized</code> option to create a web optimized COG (#10)</li> <li>add <code>--latitude-adjustment/--global-maxzoom</code> option to adjust MAX_ZOOM for global datasets</li> <li>Web-optimized tests needs python3.6 (cogdumper)</li> <li>add <code>--resampling</code> option to select the resampling algorithm when using <code>--web-optimized</code></li> <li>add <code>--in-memory/--no-in-memory</code> options to use temporyNamedd file instead of in-memory temp file.</li> </ul>"},{"location":"release-notes/#10b3-2019-03-30","title":"1.0b3 (2019-03-30)","text":"<p>Breaking Changes:</p> <ul> <li>remove deprecated YCBCR profile</li> <li>512x512 dataset without internal tiling are valid</li> </ul>"},{"location":"release-notes/#10b2-2019-03-27","title":"1.0b2 (2019-03-27)","text":"<p>Breaking Changes:</p> <ul> <li>Switch from JPEG to DEFLATE as default profile in CLI (#66)</li> </ul>"},{"location":"release-notes/#10b1-2019-03-25","title":"1.0b1 (2019-03-25)","text":"<p>Breaking Changes:</p> <ul> <li>refactor utils.get_maximum_overview_level to get rasterio dataset as input and reduce the number of dataset opennings (#61)</li> </ul>"},{"location":"release-notes/#10b0-2019-03-15","title":"1.0b0 (2019-03-15)","text":"<ul> <li>add more logging and <code>--quiet</code> option (#46)</li> <li>add <code>--overview-blocksize</code> to set overview's internal tile size (#60)</li> </ul> <p>Bug fixes:</p> <ul> <li>copy tags and description from input to output (#19)</li> <li>copy input mask band to output mask</li> </ul> <p>Breaking Changes:</p> <ul> <li>rio cogeo now has subcommands: 'create' and 'validate' (#6).</li> <li>internal mask creation is now optional (--add-mask).</li> <li>internal nodata or alpha channel can be forwarded to the output dataset.</li> <li>removed default overview blocksize to be equal to the raw data blocksize (#60)</li> </ul>"},{"location":"release-notes/#10dev10-2019-02-12","title":"1.0dev10 (2019-02-12)","text":"<ul> <li>allow non integer nodata value (#51)</li> <li>fix GDAL blocksize options casting for overview calculation (#50)</li> </ul>"},{"location":"release-notes/#10dev9-2019-02-11","title":"1.0dev9 (2019-02-11)","text":"<ul> <li>Renamed \"ycbcr\" profile's name to \"jpeg\" to reflect the compression name.   \"ycbcr\" profile will raise a \"DeprecationWarning\" (#44)</li> <li>\"webp\" profile has been added to COG profiles. Exploitation of this new   compression mode will require GDAL 2.4 (#27)</li> <li>Rio-cogeo can calculate the overview level based on the internal tile size   and the dataset width/height (#37)</li> </ul>"},{"location":"release-notes/#10dev8-2018-10-02","title":"1.0dev8 (2018-10-02)","text":"<ul> <li>write tags in output file (#31)</li> <li>add bilinear, cubic spline, lanczos resampling modes for overviews</li> </ul>"},{"location":"release-notes/#10dev7-2018-09-12","title":"1.0dev7 (2018-09-12)","text":"<ul> <li>add resampling option for overviews (#28)</li> </ul>"},{"location":"release-notes/#10dev6-2018-08-23","title":"1.0dev6 (2018-08-23)","text":"<ul> <li>Remove unnecessary compression for in-memory step (reduce runtime and memory usage) (#25)</li> </ul>"},{"location":"release-notes/#10dev4-2018-07-16","title":"1.0dev4 (2018-07-16)","text":"<ul> <li>rasterio 1.0</li> </ul>"},{"location":"release-notes/#10dev3-2018-07-05","title":"1.0dev3 (2018-07-05)","text":"<ul> <li>remove default bidx in cli (#17)</li> </ul>"},{"location":"release-notes/#10dev2-2018-06-28","title":"1.0dev2 (2018-06-28)","text":"<ul> <li>Add ZSTD compressed COG profile (#14)</li> <li>Fix warnings for useless boundless=True option (#13)</li> <li>add BIGTIFF=IF_SAFER to COG profile (if BIGTIFF not set otherwise in the env)</li> </ul> <p>Breaking Changes: * replace \"BAND\" by \"PIXEL\" interleave in PACKBITS profile (#16)</p>"},{"location":"release-notes/#10dev12018-16-13","title":"1.0dev1(2018-16-13)","text":"<ul> <li>Initial release. Requires Rasterio &gt;= 1.0b1.</li> </ul>"}]}